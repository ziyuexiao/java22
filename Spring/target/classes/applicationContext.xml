<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--
       autowire: constructor 先根据构造方法参数的名称去Spring中找被注入的对象，
       如果找不到再根据构造方法参数的类型去Spring中找被注入的对象
   -->

    <!--
        ·id: 容器内唯一
        ·class：被管理bean的完全限定名
        ·放入Spring容器的Bean，默认都是单例的 scope="singleton"
        ·scope="prototype" 每次获取的都是不同的对象实例
        ·Bean的对象默认会在Spring容器启动时创建。如果Bean的Scope值为prototype，那对象会在
        调用时创建;如果Bean的Scope为singleton时，将lazy-init的属性设置true，那么对象也会在
        调用时创建
    -->
    <!--将Bean放入Spring容器-->
    <bean id="UserDaoImpl" class="com.kaishengit.dao.impl.UserDaoImpl"/>
    <!--<bean id="UserDaoImpl" class="com.kaishengit.dao.impl.UserDaoImpl" scope="prototype"/>-->
    <!--<bean id="UserDaoImpl" class="com.kaishengit.dao.impl.UserDaoImpl" lazy-init="true"/>-->
    <!--配置别名，一般不用-->
    <!--<alias name="UserDaoImpl" alias="myUserDaoImpl"/>-->
    <!--
       autowire: constructor 先根据构造方法参数的名称去Spring中找被注入的对象，
       如果找不到再根据构造方法参数的类型去Spring中找被注入的对象
   -->
    <!--<bean id="userservice" class="com.kaishengit.service.impl.UserServiceImpl" autowire="constructor"/>-->

    <bean id="userservice" class="com.kaishengit.service.impl.UserServiceImpl">
       <!--set注入方式1-->
        <property name="userDao" ref="UserDaoImpl"/>
        <!--set注入方式2-->
        <!--<property name="userDao">
            <ref bean="UserDaoImpl"/>
        </property>-->
        <!--set注入方式3-->
        <!--<property name="userDao">
            <bean class="com.kaishengit.dao.impl.UserDaoImpl"/>
        </property>-->
        <!--基本类型和集合注入-->
      <!--  <property name="userDao" ref="UserDaoImpl"/>
        <property name="age" value="23"/>
        <property name="name" value="tom"/>
        <property name="list">
            <list>
                <value>rose</value>
                <value>jack</value>
            </list>
        </property>
        <property name="set">
            <set>
                <value>32.11</value>
                <value>33.52</value>
            </set>
        </property>
        <property name="map">
            <map>
                <entry key="k1" value="v1"/>
                <entry key="k2" value="v2"/>
            </map>
        </property>
        <property name="properties">
            <props>
                <prop key="k1">v1</prop>
                <prop key="k2">v2</prop>
            </props>
        </property>-->

        <!--构造方法注入1，name是参数名字-->
        <!--<constructor-arg name="userDao" ref="UserDaoImpl"/>-->
        <!--根据构造方法参数的类型：不适合有多个参数类型相同的情况-->
        <!--<constructor-arg type="com.kaishengit.dao.UserDao" ref="UserDaoImpl"/>-->
        <!--根据构造方法参数的索引，从0开始-->
        <!--<constructor-arg index="0" ref="UserDaoImpl"/>-->

    </bean>

    <!--<bean id="userservice" class="com.kaishengit.service.impl.UserServiceImpl" p:userDao-ref="UserDaoImpl"/>-->


    <!--通知类-->
    <bean id="aopAspect" class="com.kaishengit.aop.AopAspect"/>
    <aop:config>
        <!--引用通知类-->
        <aop:aspect ref="aopAspect">
            <!--切入点表达式-->
            <aop:pointcut id="pt" expression="execution(* com.kaishengit.service..*.*(..))"/>
            <!--环绕通知-->
            <aop:around method="arroundAdvice" pointcut-ref="pt"/>
           <!-- &lt;!&ndash;前置通知&ndash;&gt;
            <aop:before method="beforeAdvice" pointcut-ref="pt"/>
            &lt;!&ndash;后置通知&ndash;&gt;
            <aop:after-returning method="afterAdvice" pointcut-ref="pt" returning="result"/>
            &lt;!&ndash;异常通知&ndash;&gt;
            <aop:after-throwing method="exceptionAdvice" pointcut-ref="pt" throwing="e"/>
            &lt;!&ndash;最终通知&ndash;&gt;
            <aop:after method="finallyAdvice" pointcut-ref="pt"/>-->

        </aop:aspect>
    </aop:config>







</beans>